<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace WifiModule {" line1="    let response:string = &quot;&quot;" line2="    let newLine:string = &quot;\r&quot; + &quot;\n&quot;" line3="    let is_connected:boolean = false" line4="    let is_busy:boolean = false" line5="" line6="    function executeAtCommand(command: string, waitMs: number) {" line7="        serial.writeString(&quot;&quot; + command + newLine)" line8="        basic.pause(waitMs)" line9="    }" line10="" line11="    /**" line12="     * Setup and connect to WiFi." line13="     * @param ssid WiFi SSID" line14="     * @param password Password" line15="     */" line16="    //% block=&quot;Connect WiFi with|RxPin %rxPin|TxPin %txPin|SSID %ssid|Password %passsword&quot;" line17="    export function setupWifi(rxPin: SerialPin, txPin: SerialPin, ssid: string, password: string) {" line18="        serial.redirect(rxPin, txPin, BaudRate.BaudRate115200)" line19="        serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line20="            let data: string;" line21="            " line22="            let chunk = serial.readString()" line23="            if (chunk.includes(&quot;[&quot;)) {" line24="                data = chunk.slice(chunk.indexOf(&quot;[&quot;))" line25="                response = response + data" line26="            } else if (chunk.includes(&quot;]&quot;)) {" line27="                data = chunk" line28="                response = response + data" line29="            }            " line30="        })" line31="        executeAtCommand(&quot;AT+RESTORE&quot;, 1000)" line32="        executeAtCommand(&quot;AT+RST&quot;, 1000)" line33="        executeAtCommand(&quot;AT+CWMODE=1&quot;, 1000)" line34="        executeAtCommand(&quot;AT+CWJAP=\&quot;&quot; + ssid + &quot;\&quot;,\&quot;&quot; + password + &quot;\&quot;&quot;, 3000)" line35="        is_connected = true" line36="    }" line37="" line38="    /**" line39="     * Is WiFi connected? " line40="     */" line41="    //% block" line42="    export function isConnected(): boolean {" line43="        return is_connected" line44="    }" line45="" line46="    /**" line47="     * Read pin's value from Blynk." line48="     * @param blynkKey Token from Blynk" line49="     * @param pin Pin on Blynk" line50="     */" line51="    //% block=&quot;Read from Blynk with|Token %blynkKey|Pin %pin&quot;" line52="    export function readBlynkPinValue(blynkKey: string, pin: string): string {        " line53="        if (is_busy) {" line54="            return &quot;&quot;" line55="        }" line56="        is_busy = true" line57="        response = &quot;&quot;" line58="        executeAtCommand(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;blynk-cloud.com\&quot;,80&quot;, 1000)" line59="        let command:string = &quot;GET /&quot; + blynkKey + &quot;/get/&quot; + pin + &quot; HTTP/1.1&quot; + newLine + &quot;Host: blynk-cloud.com&quot; + newLine + newLine" line60="        executeAtCommand(&quot;AT+CIPSEND=&quot; + (&quot;&quot; + command.length), 0)" line61="        executeAtCommand(command, 1000)" line62="        let v = response.slice(response.indexOf(&quot;[&quot;) + 2, response.indexOf(&quot;]&quot;) - 1) // Extract value" line63="        executeAtCommand(&quot;AT+CIPCLOSE&quot;, 1000)" line64="        is_busy = false" line65="        return v" line66="    }" line67="" line68="    /**" line69="     * Write pin's value to Blynk." line70="     * @param blynkKey Token from Blynk" line71="     * @param pin Pin on Blynk" line72="     * @param value Value" line73="     */" line74="    //% block=&quot;Write to Blynk with|Token %blynkKey|Pin %pin|Value %value&quot;" line75="    export function writeBlynkPinValue(blynkKey: string, pin: string, value: string) {" line76="        if (is_busy) {" line77="            return" line78="        }" line79="        is_busy = true" line80="        response = &quot;&quot;" line81="        executeAtCommand(&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;blynk-cloud.com\&quot;,80&quot;, 1000)" line82="        let command2:string = &quot;GET /&quot; + blynkKey + &quot;/update/&quot; + pin + &quot;?value=&quot; + (&quot;&quot; + value) + &quot; HTTP/1.1&quot; + newLine + &quot;Host: blynk-cloud.com&quot; + newLine + newLine" line83="        executeAtCommand(&quot;AT+CIPSEND=&quot; + (&quot;&quot; + command2.length), 0)" line84="        executeAtCommand(command2, 1000)" line85="        executeAtCommand(&quot;AT+CIPCLOSE&quot;, 1000)" line86="        is_busy = false" line87="    }" line88="" line89="}" numlines="90"></mutation></block></statement></block></xml>